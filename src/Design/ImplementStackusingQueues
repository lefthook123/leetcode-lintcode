/*mplement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
*/
/*idea: push:0,1,2,3
        top/pop: 3,0,1,2
        if pop, the first element will pop, and remaining order is same
        if top:get the value of the first element, then still add it to the last index
*/
class MyStack {
    Queue<Integer> queue=new LinkedList<Integer>();
    // Push element x onto stack.
    public void push(int x) {
        queue.add(x);
    }

    // Removes the element on top of the stack.
    public void pop() {
        if(empty()){
            return;
        }
        int size=queue.size();
        while(size>1){
            queue.add(queue.poll());
            size--;
        }
        queue.poll();
    }

    // Get the top element.
    public int top() {
        if(empty()){
            return -1;
        }
        int size=queue.size();
        while(size>1){
            queue.add(queue.poll());
            size--;
        }
        int val=queue.peek();
        queue.add(queue.poll());
        return val;
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return queue.isEmpty();
    }
}
