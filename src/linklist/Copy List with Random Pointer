/*A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.
*/

/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null){
            return head;
        }
        //map: key node value: copy node
        Map<RandomListNode,RandomListNode> map=new HashMap<RandomListNode,RandomListNode>();
        RandomListNode run=head;
        while(run != null){
            map.put(run,new RandomListNode(run.label));
            run=run.next;
        }
        for(RandomListNode node:map.keySet()){
            if(node.random != null){
                map.get(node).random=map.get(node.random);
            }
        }
        run=head;
        while(run != null){
            map.get(run).next=map.get(run.next);
            run=run.next;
        }
        return map.get(head);
    }
}
