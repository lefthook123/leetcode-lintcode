/*Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.
*/

public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        int min=Integer.MAX_VALUE;
        int result=0;
        int start=0;
        for(int i=0;i<nums.length;++i){
            result+=nums[i];
            while(result>=s){
                min=Math.min(min,i-start+1);
                result-=nums[start];
                start++;
            }
        }
        return min==Integer.MAX_VALUE?0:min;
    }
}
