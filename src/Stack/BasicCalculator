/*Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

You may assume that the given expression is always valid.

Some examples:
"1 + 1" = 2
" 2-1 + 2 " = 3
"(1+(4+5+2)-3)+(6+8)" = 23
*/
/* stack:number,sign,number,sign......
*/
public class Solution {
    public int calculate(String s) {
        if(s == null || s.length() == 0){
            return 0;
        }
        int result=0;
        int sign=1;
        Stack<Integer> stack=new Stack<Integer>();
        for(int i=0;i<s.length();++i){
            if(s.charAt(i) == '+'){
                sign=1;
            }else if(s.charAt(i)=='-'){
                sign=-1;
            }else if(s.charAt(i)=='('){
                stack.push(result);
                stack.push(sign);
                result=0;
                sign=1;
            }else if(s.charAt(i) == ')'){
                int presign=stack.pop();
                int preresult=stack.pop();
                result=preresult+presign*result;
                sign=1;
            }else if(Character.isDigit(s.charAt(i))){
                int cur=s.charAt(i)-'0';
                while(i<s.length()-1 && Character.isDigit(s.charAt(i+1))){
                    cur=cur*10+s.charAt(i+1)-'0';
                    i++;
                }
                result+=cur*sign;
            }
        }
        return (int)result;
    }
}
