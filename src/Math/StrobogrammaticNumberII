/*A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).

Find all strobogrammatic numbers that are of length = n.

For example,
Given n = 2, return ["11","69","88","96"].

Hint:

Try to use recursion and notice that it should recurse with n - 2 instead of n - 1.
*/
/*注意单复数
注意n!=1的时候，首位为0的情况
*/
public class Solution {
    public List<String> findStrobogrammatic(int n) {
        List<String> result=new ArrayList<String>();
        if(n==0){
            return result;
        }
        Map<Integer,Integer> map=new HashMap<Integer,Integer>();
        map.put(0,0);
        map.put(1,1);
        map.put(6,9);
        map.put(8,8);
        map.put(9,6);
        StringBuffer br=new StringBuffer();
        helper(result,br,n,map);
        return result;
    }
    public void helper(List<String> result,StringBuffer br,int n,Map<Integer,Integer> map){
        if((n== 1 &&br.length() == n)||(n != 1 && br.length() == n && br.charAt(0)!='0')){
            result.add(br.toString());
                            System.out.println(br.toString());

            return;
        }
      if((n != 1 && br.length() == n && br.charAt(0)=='0')) return;
        for(int i=0;i<10;++i){
            if(map.containsKey(i)){
                if(n%2 == 1 && br.length() ==0 && i == map.get(i)){
                    br.append(i);
                    helper(result,br,n,map);
                    br.deleteCharAt(0);
                }
                else if((n%2 == 1 && br.length()>0) || n%2 == 0){
                    br.insert(0,i);
                    br.append(map.get(i));
                    helper(result,br,n,map);
                    br.deleteCharAt(0);
                    br.deleteCharAt(br.length()-1);
                }
            }
        }
    }
}
