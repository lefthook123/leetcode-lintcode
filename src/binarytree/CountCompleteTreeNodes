/*Given a complete binary tree, count the number of nodes.

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int countNodes(TreeNode root) {
        if(root == null) {
            return 0;
        }    
        return helper(root);
    }
    public int helper(TreeNode root) {
        if(root == null) {
            return 0;
        }
        int leftDepth = getDepth(root.left,true);
        int rightDepth = getDepth(root.right,false);
        if(leftDepth == rightDepth) {
            return (int)Math.pow(2,leftDepth)-1;
        }
        int left = helper(root.left);
        int right = helper(root.right);
        return left+right+1;
    }
    public int getDepth(TreeNode root,boolean isLeft) {
        if(root == null) {
            return 0;
        }
        int cnt = 1;
        while(root != null) {
            if(isLeft) {
                root = root.left;
            } else {
                root = root.right;
            }
            cnt++;
        }
        return cnt;
    }
}
