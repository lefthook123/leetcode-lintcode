/*Given a binary tree, count the number of uni-value subtrees.

A Uni-value subtree means all nodes of the subtree have the same value.

For example:
Given binary tree,
              5
             / \
            1   5
           / \   \
          5   5   5
return 4.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int countUnivalSubtrees(TreeNode root) {
        if(root == null){
            return 0;
        }
        if(root.left == null && root.right == null){
            return 1;
        }
        int[] count={0};
        helper(root,count);
        return count[0];
    }
    public boolean helper(TreeNode root,int[] count){
        if(root.left == null && root.right == null){
            count[0]++;
            return true;
        }else if(root.left != null && root.right == null){
            if(helper(root.left,count) && root.left.val == root.val){
                count[0]++;
                return true;
            }
        }else if(root.right != null && root.left == null){
            if(helper(root.right,count) && root.right.val == root.val){
                count[0]++;
                return true;
            }
        }else if(root.right != null && root.left != null){
            boolean l=helper(root.left,count);
            boolean r=helper(root.right,count);
            if(l && r && root.val == root.left.val && root.val == root.right.val){
                count[0]++;
                return true;
            }
        }
        return false;
    }
}
