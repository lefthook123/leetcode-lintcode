/*Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.

For example:
Given a binary tree {1,2,3,4,5},
    1
   / \
  2   3
 / \
4   5
return the root of the binary tree [4,5,2,#,#,3,1].
   4
  / \
 5   2
    / \
   3   1  
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode upsideDownBinaryTree(TreeNode root) {
        if(root == null){
            return root;
        }
        TreeNode cur=root;
        Stack<TreeNode> stack=new Stack<TreeNode>();
        boolean top=false;
        while(!stack.isEmpty() || cur != null){
            while(cur != null){
                stack.push(cur);
                cur=cur.left;
            }
            if(!top){
                root=stack.peek();
                top=true;
            }
            cur=stack.pop();
            if(stack.isEmpty()) return root;
            TreeNode node=stack.pop();
            cur.right=node;
            if(node.right != null)
                cur.left=node.right;
            node.left=null;
            node.right=null;
            cur=node;
        }
        return root;
    }
}
