/*Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].
*/
public class Solution {
  public static List<Integer> spiralOrder(int[][] matrix) {
    List<Integer> result=new ArrayList<Integer>();
    if(matrix == null || matrix.length == 0){
        return result;
    }
    int m=matrix.length;
    int n=matrix[0].length;
    int count=0;
    int i=0,j=0;
    int id=0;
    while(count*2<m && count*2<n){
          while(j<n-count){
              result.add(matrix[i][j++]);
          }
          j--;
          i++;
          while(i<m-count){
            result.add(matrix[i++][j]);
          }
      if(m - 2 * count <=1 || n - 2 * count <= 1)  // if only one row /col remains
                break;
          i--;
          j--;
          while(j>=count){
            result.add(matrix[i][j--]);
          }
          j++;
          i--;
          while(i>count){
            result.add(matrix[i--][j]);
          }
          i++;
          j++;
          count++;
        }
    return result;
}
}
