//this version have some warning
import java.io.*;
import java.util.*;


class MyHashTable<K extends Object ,V extends Object> {
  private class Node {
    public K key;
    public V value;
    public Node next;
    public Node(K key,V value) {
      this.key = key;
      this.value = value;
      this.next = null;
    }
  }
  private Object[] buckets;
  private int capacity;
  private int size;
  public MyHashTable(int capacity) {
    size = 0;
    buckets = new Object[capacity];
    this.capacity = capacity;
  }
  public V put(K key, V value) {
    if(key == null) {
      throw new NullPointerException("Key cannot be null");
    }
    int location = key.hashCode()%capacity;
    if(buckets[location] == null) {
      buckets[location] = new Node(key,value);
    } else {
      Node head = (Node)buckets[location];
      Node prev = null;
      while(head != null) {
        if(head.key.equals(key)) {
          V prevValue = head.value;
          head.value = value;
          return prevValue;
        }
        prev = head;
        head = head.next;
      }
      prev.next = new Node(key,value);
    }
    size++;
    return null;
  }
  
  public V get(K key) {
    if(key == null) {
      throw new NullPointerException("Key cannot be null");  
    }
    int location = key.hashCode()%capacity;
    Node head = (Node) buckets[location];
    while(head != null && !head.key.equals(key)) {
      head = head.next;
    }
    if(head == null) {
      return null;
    } 
    return head.value;
  }
  
  public boolean containsKey(K key){
    if(key == null){
      throw new NullPointerException("key cannot be null");
    }
    int location=key.hashCode()%capacity;
    Node head=(Node)buckets[location];
    while(head != null && !head.key.equals(key)){
      head=head.next;
    }
    if(head == null){
      return false;
    }
    return true;
  }
  
  public boolean containsValue(V value){
    Set<Object> set=keySet();
    for(Object ob:set){
      int location=ob.hashCode()%capacity;
      Node head=(Node)buckets[location];
      while(head != null && !head.key.equals(ob)){
        head=head.next;
      }
      if(head != null && head.key.equals(ob)){
        if(head.value==value){
          return true;
        }
      }
    }
    return true;
  }
  
  public Set<Object> keySet(){
    Set<Object> set=new HashSet<Object>();
    for(int i=0;i<capacity;++i){
      if(buckets[i] != null){
        Node head=(Node)buckets[i];
        while(head != null){
          set.add(head.key);
          head=head.next;
        }
      }
    }
    return set;
  }
  public V remove(K key){
    if(key == null){
      throw new NullPointerException("key cannot be null");
    }
    int location=key.hashCode()%capacity;
    Node head=(Node)buckets[location];
    Node p=null;
    while(head != null && !head.key.equals(key)){
      p=head;
      head=head.next;
    }
    if(head == null){
      return null;
    }
    size--;
    if(p == null){
      buckets[location]=head.next;
    }else{
      p.next=head.next;
    }
    return head.value;
  }
  
  public int size(){
    return size;
  }
  public boolean isEmpty(){
    return size==0;
  }
}
class Solution {
  public static void main(String[] args) {
        MyHashTable<Integer,String> mytable = new MyHashTable<Integer,String>(10);
        mytable.put(3,"string");
        mytable.put(4,"5");
        mytable.put(6,"8");

        System.out.println(mytable.containsValue("5"));
  }
}
