/*Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings.

For example,
Given [[0, 30],[5, 10],[15, 20]],
return false.
*/
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        if(intervals == null || intervals.length == 0) {
            return true;
        }
        int n = intervals.length;
        int[] start = new int[n];
        int[] end = new int[n];
        for(int i=0; i < n; i++) {
            start[i] = intervals[i].start;
            end[i] = intervals[i].end;
        }            
        Arrays.sort(start);
        Arrays.sort(end);
        int i=0;
        int j=0;
        int cnt = 0;
        while(i < n && j < n) {
            if(start[i] < end[j]) {
                cnt++;
                i++;
            } else {
                cnt--;
                j++;
            }
            if(cnt > 1)
                return false;
        }
        return true;
    }
}
