/*Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:

"abc" -> "bcd" -> ... -> "xyz"
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

For example, given: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"], 
Return:

[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]
Note: For the return value, each inner list's elements must follow the lexicographic order.
*/
public List<List<String>> groupStrings(String[] strings) {
        List<List<String>> result=new ArrayList<List<String>>();
        if(strings == null || strings.length == 0){
            return result;
        }
        Arrays.sort(strings);
        Map<String,List<String>> map=new HashMap<String,List<String>>();
        for(String str:strings){
            String newstr=code(str);
            if(map.containsKey(newstr)){
                map.get(newstr).add(str);
            }else{
                List<String> sub=new ArrayList<String>();
                sub.add(str);
                map.put(newstr,sub);
            }
        }
        for(String str:map.keySet()){
            result.add(map.get(str));
        }
        return result;
    }
    public String code(String str){
        StringBuffer br=new StringBuffer();
        for(int i=0;i<str.length();++i){
            br.append(((str.charAt(i)-str.charAt(0))+26)%26);
            br.append(" ");
        }
        return br.toString();
    }
