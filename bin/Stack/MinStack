/*Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
*/
class MinStack {
    Stack<Integer> stack=new Stack<Integer>();
    Stack<Integer> min=new Stack<Integer>();
    public void push(int x) {
        stack.push(x);
        if(!min.isEmpty()){
            if(min.peek() >=x){
                min.push(x);
            }
        }else{
            min.push(x);
        }
    }

    public void pop() {
        int val=stack.pop();
        if(!min.isEmpty()){
            if(min.peek() == val){
                min.pop();
            }
        }
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        if(!min.isEmpty()){
            return min.peek();
        }
        return -1;
    }
}
